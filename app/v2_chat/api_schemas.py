
import uuid

import pydantic


class ChatRequest(pydantic.BaseModel):
    question: str = pydantic.Field(
        description="The question to ask the model",
        examples=[
            "What ethical consideration do we need to make sure we cover using AI?"
        ],
    )
    conversation_id: uuid.UUID | None = pydantic.Field(
        default=None,
        description="UUIDv4 identifier for the conversation",
        examples=["123e4567-e89b-12d3-a456-426614174000"],
        alias="conversationId",
    )


class ContextDocumentResponse(pydantic.BaseModel):
    content: str = pydantic.Field(description="Content of matched document content")
    location: str = pydantic.Field(description="Location of document or knowledge source")
    name: str = pydantic.Field(description="Name of document or knowledge source")
    snapshot_id: str = pydantic.Field(
        description="Internal identifier for parent knowledge snapshot",
        serialization_alias="snapshotId",
    )
    source_id: str = pydantic.Field(
        description="Internal identifier for source document",
        serialization_alias="sourceId",
    )


class TokenUsageResponse(pydantic.BaseModel):
    model: str = pydantic.Field(
        description="The model used for the chat flow stage",
    )
    stage_name: str = pydantic.Field(
        description="Name of the stage in the chat flow",
        serialization_alias="stageName",
    )
    input_tokens: int = pydantic.Field(
        description="Number of input tokens used by the model",
        serialization_alias="inputTokens",
    )
    output_tokens: int = pydantic.Field(
        description="Number of output tokens generated by the model",
        serialization_alias="outputTokens",
    )
    total_tokens: int = pydantic.Field(
        description="Total number of tokens used by the model",
        serialization_alias="totalTokens",
    )


class ChatResponse(pydantic.BaseModel):
    answer: str = pydantic.Field(
        description="The answer from the model",
        examples=[
            "When using AI, it is important to consider the ethical implications of its use, including issues such as bias, privacy, and accountability."
        ],
    )
    conversation_id: uuid.UUID = pydantic.Field(
        description="UUIDv4 identifier for the conversation",
        examples=["123e4567-e89b-12d3-a456-426614174000"],
        serialization_alias="conversationId",
    )
    context_documents: list[ContextDocumentResponse] = pydantic.Field(
        description="The documents used to generate the answer",
        serialization_alias="contextDocuments",
    )
    usage: list[TokenUsageResponse] = pydantic.Field(
        description="Token usage information",
        serialization_alias="usage",
    )
